<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="false">
    <!--
     说明：
     1、日志级别及文件
         日志记录采用分级记录，级别与日志文件名相对应，不同级别的日志信息记录到不同的日志文件中
         例如：error级别记录到log_error_xxx.log或log_error.log（该文件为当前记录的日志文件），而log_error_xxx.log为归档日志，
         日志文件按日期记录，同一天内，若日志文件大小等于或大于2M，则按0、1、2...顺序分别命名
         例如log-level-2013-12-21.0.log
         其它级别的日志也是如此。
     2、文件路径
         若开发、测试用，在Eclipse中运行项目，则到Eclipse的安装路径查找logs文件夹，以相对路径../logs。
         若部署到Tomcat下，则在Tomcat下的logs文件中
     3、Appender
         FILEERROR对应error级别，文件名以log-error-xxx.log形式命名
         FILEWARN对应warn级别，文件名以log-warn-xxx.log形式命名
         FILEINFO对应info级别，文件名以log-info-xxx.log形式命名
         FILEDEBUG对应debug级别，文件名以log-debug-xxx.log形式命名
         stdout将日志信息输出到控制上，为方便开发测试使用
  -->
    <contextName>NutzFw</contextName>
    <!--
    关于catalina.base解释如下：
        catalina.home指向公用信息的位置，就是bin和lib的父目录。
        catalina.base指向每个Tomcat目录私有信息的位置，就是conf、logs、temp、webapps和work的父目录。
    -->
    <property name="LOG_PATH" value="${catalina.base}/logs"/>
    <!--设置系统日志目录-->
    <property name="applicationName" value="NutzFw"/>
    <!--
        %p:输出优先级，即DEBUG,INFO,WARN,ERROR,FATAL
        %r:输出自应用启动到输出该日志讯息所耗费的毫秒数
        %t:输出产生该日志事件的线程名
        %f:输出日志讯息所属的类别的类别名
        %c:输出日志讯息所属的类的全名
        %d:输出日志时间点的日期或时间，指定格式的方式： %d{yyyy-MM-dd HH:mm:ss}
        %l:输出日志事件的发生位置，即输出日志讯息的语句在他所在类别的第几行。
        %m:输出代码中指定的讯息，如log(message)中的message
        %n:输出一个换行符号
    -->
    <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符-->
    <property name="pattern" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger Line:%-3L - %msg%n"/>
    <property name="encoder.pattern" value="[%-5level] [%date{MM-dd HH:mm:ss}] [TraceUser:%X{traceUser}] [TraceId:%X{traceId}] [%t] %logger{10}:%line %X{method} - %msg%n"/>
    <property name="LOG_HOME" value="${LOG_PATH}/logs/${applicationName}"/>

    <!-- 输出目的地：控制台 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${encoder.pattern}</pattern>
        </encoder>
    </appender>
    <!-- 输出目的地：滚动文件 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${encoder.pattern}</pattern>
        </encoder>
        <File>${LOG_HOME}/log.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/log-%d{yyyy-MM-dd}.log.gz</fileNamePattern>
            <!--30天的时间周期，日志量最大10GB-->
            <maxHistory>30</maxHistory>
            <!-- 该属性在 1.1.6版本后 才开始支持-->
            <totalSizeCap>10GB</totalSizeCap>
        </rollingPolicy>
        <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
            <!--每个日志文件最大50MB-->
            <maxFileSize>50MB</maxFileSize>
        </triggeringPolicy>
    </appender>
    <!-- 异步输出 -->
    <appender name="ASYNC_FILE" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>1024</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="FILE"/>
    </appender>

    <!-- 为防止进程退出时数据丢失，请记住添加此配置 -->
    <shutdownHook class="ch.qos.logback.core.hook.DelayingShutdownHook"/>
    <!-- 该监听器将在StatusManager中打印状态到控制台 -->
    <statusListener class="ch.qos.logback.core.status.OnConsoleStatusListener"/>

    <logger name="jdbc.sqltiming" level="debug"/>
    <logger name="com.ibatis" level="debug"/>
    <logger name="com.ibatis.common.jdbc.SimpleDataSource" level="debug"/>
    <logger name="com.ibatis.common.jdbc.ScriptRunner" level="debug"/>
    <logger name="com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate" level="debug"/>
    <logger name="java.sql.Connection" level="debug"/>
    <logger name="java.sql.Statement" level="debug"/>
    <logger name="java.sql.PreparedStatement" level="debug"/>
    <logger name="java.sql.ResultSet" level="debug"/>
    <logger name="org.springframework" level="WARN"/>
    <logger name="org.apache.shiro.web.servlet.SimpleCookie" level="OFF"/>
    <logger name="org.apache.commons.beanutils" level="INFO"></logger>
    <logger name="org.nutz.ioc.loader.combo.ComboIocLoader" level="INFO"></logger>
    <logger name="org.nutz.ioc.impl.NutIoc" level="INFO"></logger>
    <logger name="org.apache.shiro" level="WARN"></logger>
    <logger name="org.nutz.mvc.view.RawView" level="INFO"></logger>
    <logger name="org.quartz.core" level="INFO"></logger>
    <logger name="oshi.*" level="INFO"></logger>
    <logger name="io.swagger" level="ERROR"></logger>

    <root level="DEBUG">
        <!-- 生产环境请将 STDOUT 去掉更换为 ASYNC_FILE -->
        <appender-ref ref="STDOUT"/>
    </root>

</configuration>
